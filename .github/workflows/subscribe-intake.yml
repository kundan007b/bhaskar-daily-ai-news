name: "Subscribe intake"

on:
  issues:
    types: [opened]

permissions:
  contents: write
  issues: write

jobs:
  add_subscriber:
    if: contains(github.event.issue.body, 'form: subscribe')
    runs-on: ubuntu-latest
    steps:
      - name: Check required secrets
        run: |
          if [ -z "${{ secrets.SUBS_REPO }}" ] || [ -z "${{ secrets.SUBS_REPO_TOKEN }}" ]; then
            echo "Missing SUBS_REPO or SUBS_REPO_TOKEN secrets. Please set them in repo settings." >&2
            exit 1
          fi

      - name: Extract email from issue body
        id: extract
        env:
          BODY: ${{ github.event.issue.body }}
        run: |
          python3 - << 'PY'
import os, re, sys
body = os.environ.get('BODY', '')
# simple regex to find first email-like string
m = re.search(r"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}", body)
email = m.group(0) if m else ''
if not email:
    print('::error::No valid email found in issue body')
    sys.exit(1)
gh_out = os.environ.get('GITHUB_OUTPUT')
with open(gh_out, 'a') as f:
    f.write(f"email={email}\n")
PY

      - name: Prepare git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Clone private subscribers repo
        run: |
          set -e
          git clone "https://x-access-token:${{ secrets.SUBS_REPO_TOKEN }}@github.com/${{ secrets.SUBS_REPO }}.git" subscribers-repo
          cd subscribers-repo
          mkdir -p data
          if [ ! -f data/subscribers.csv ]; then
            echo "timestamp,email,source,issue_url" > data/subscribers.csv
          fi
          echo "$(date -u +%Y-%m-%dT%H:%M:%SZ),${{ steps.extract.outputs.email }},github-issue,${{ github.event.issue.html_url }}" >> data/subscribers.csv
          git add data/subscribers.csv
          git commit -m "chore(subscribers): add ${{ steps.extract.outputs.email }} (via $GITHUB_RUN_ID)" || echo "No changes to commit"
          git push origin HEAD

      - name: Thank and close the issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issue_number = context.issue.number;
            const email = `**${{ steps.extract.outputs.email }}**`;
            await github.rest.issues.createComment({
              owner, repo, issue_number,
              body: `Thanks for subscribing, ${email}! You're on the list. You can open another issue to unsubscribe anytime.`
            });
            await github.rest.issues.update({ owner, repo, issue_number, state: 'closed' });
