name: "Issue to Post"

on:
  issues:
    types: [opened]

permissions:
  contents: write
  issues: write

jobs:
  publish_post:
    if: contains(github.event.issue.body, 'form: new_post')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse issue to post
        id: parse
        env:
          BODY: ${{ github.event.issue.body }}
        run: |
          python3 - << 'PY'
import os, re, sys, datetime, unicodedata, pathlib
body = os.environ.get('BODY','')

def extract_block(label):
    # Capture text after '### {label}' until next '### ' or EOF
    pattern = re.compile(rf"###\s+{re.escape(label)}\s*\n([\s\S]*?)(?=\n###\s|\Z)", re.IGNORECASE)
    m = pattern.search(body)
    if not m:
        return ''
    return m.group(1).strip()

def extract_line(label):
    val = extract_block(label)
    # take first non-empty line
    for line in val.splitlines():
        s = line.strip()
        if s:
            return s
    return ''

title = extract_line('Post title (English)') or extract_line('Title')
category = extract_line('Category').lower() or 'general'
summary = extract_block('One-line summary (EN)') or extract_block('Summary')
content_en = extract_block('Content (English)') or extract_block('Content')
content_hi = extract_block('Content (Hindi)')
image_url = extract_line('Image URL')

if not title or not content_en:
    print('::error::Missing required fields (title/content).')
    sys.exit(1)

def slugify(value):
    value = unicodedata.normalize('NFKD', value).encode('ascii', 'ignore').decode('ascii')
    value = re.sub(r'[^a-zA-Z0-9\s-]', '', value).strip().lower()
    value = re.sub(r'[\s_-]+', '-', value)
    return value.strip('-')[:70]

slug = slugify(title)
today = datetime.datetime.utcnow().date().isoformat()
filename = f"_posts/{today}-{slug}.md"

front_matter = {
    'layout': 'post',
    'title': title,
    'date': f"{today} 09:00:00 +0000",
    'categories': [category],
    'description': (summary[:200] if summary else ''),
}
if image_url:
    front_matter['image'] = image_url

def yaml_escape(s):
    if s is None:
        return ''
    s = s.replace('\n', '\n')
    if any(ch in s for ch in [':','-','[',']','{','}','#','&','*','!','|','>','\'','\"']):
        return '"' + s.replace('"','\"') + '"'
    return s

def dump_front_matter(d):
    lines = ['---']
    for k,v in d.items():
        if isinstance(v, list):
            lines.append(f"{k}: [{', '.join(v)}]")
        else:
            lines.append(f"{k}: {yaml_escape(str(v))}")
    lines.append('---\n')
    return '\n'.join(lines)

fm = dump_front_matter(front_matter)

content = [fm]
content.append(content_en.strip())
if content_hi.strip():
    content.append('\n\n---\n\n')
    content.append('## हिन्दी संस्करण')
    content.append('\n')
    content.append(content_hi.strip())

pathlib.Path('_posts').mkdir(parents=True, exist_ok=True)
with open(filename, 'w', encoding='utf-8') as f:
    f.write('\n'.join(content).strip() + '\n')
gh_out = os.environ.get('GITHUB_OUTPUT')
with open(gh_out, 'a') as f:
  f.write(f"filename={filename}\n")
  f.write(f"slug={slug}\n")
  f.write(f"category={category}\n")
PY

      - name: Commit and push post
        run: |
          git add _posts
          git commit -m "chore(post): publish via issue #${{ github.event.issue.number }}" || echo "No changes to commit"
          git push origin HEAD

      - name: Comment and close issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issue_number = context.issue.number;
            const p = `${{ steps.parse.outputs.filename }}`;
            await github.rest.issues.createComment({ owner, repo, issue_number, body: `✅ Post created at ${p}. It will be deployed shortly.` });
            await github.rest.issues.update({ owner, repo, issue_number, state: 'closed' });
